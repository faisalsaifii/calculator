{"version":3,"sources":["context/ThemeContext.tsx","styles/Colors.tsx","styles/GlobalStyles.tsx","components/Button.tsx","components/MyKeyboard.tsx","App.tsx"],"names":["ThemeContext","createContext","myColors","Styles","StyleSheet","create","btnBlue","width","height","borderRadius","backgroundColor","justifyContent","alignItems","margin","btnDark","btnLight","btnZeroLight","btnZeroDark","btnGray","smallTextLight","fontSize","color","fontWeight","smallTextDark","row","maxWidth","flexDirection","viewBottom","position","bottom","screenFirstNumber","alignSelf","screenSecondNumber","Button","title","onPress","isBlue","isGray","theme","useContext","TouchableOpacity","style","Text","myKeyboard","React","firstNumber","setFirstNumber","secondNumber","setSecondNumber","operation","setOperation","result","setResult","handleNumberPress","buttonValue","length","handleOperationPress","clear","View","marginBottom","toString","btnWidth","parseFloat","getResult","App","useState","setTheme","Provider","value","SafeAreaView","styles","containerlight","containerdark","Switch","onValueChange","marginTop","MyKeyboard","flex"],"mappings":"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","file":"static/js/app.4e807697.chunk.js","sourcesContent":["import { createContext } from 'react';\n\n// Context lets us pass a value deep into the component tree\n// without explicitly threading it through every component.\n// Create a context for the current theme (with \"light\" as the default).\nexport const ThemeContext = createContext('light');","export const myColors = {\n    light: '#F1F2F3',\n    dark: '#17171C',\n    blue: '#4B5EFC',\n    btnGray: '#4E505F',\n    btnDark: '#2E2F38',\n    gray: '#747477',\n    black: '#000000',\n    white: '#FFFFFF',\n    result: '#46D582'\n}","import { StyleSheet } from \"react-native\"\nimport { myColors } from \"./Colors\"\n\nexport const Styles = StyleSheet.create({\n    // Button\n    btnBlue:{\n        width: 83,\n        height: 83,\n        borderRadius: 50,\n        backgroundColor: myColors.blue,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: 5,\n    },\n    btnDark: {\n        width: 83,\n        height: 83,\n        borderRadius: 50,\n        backgroundColor: myColors.btnDark,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: 5,\n    },\n    btnLight: {\n        width: 83,\n        height: 83,\n        borderRadius: 50,\n        backgroundColor: myColors.light,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: 5,\n    },\n    btnZeroLight: {\n        width: 175,\n        height: 83,\n        borderRadius: 50,\n        backgroundColor: myColors.light,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: 5,\n    },\n    btnZeroDark: {\n        width: 175,\n        height: 83,\n        borderRadius: 50,\n        backgroundColor: myColors.btnDark,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: 5,\n    },\n    btnGray : {\n        width : 83,\n        height : 83,\n        borderRadius : 50,\n        backgroundColor : myColors.btnGray,\n        justifyContent : \"center\",\n        alignItems : \"center\",\n        margin : 5,\n    },\n    smallTextLight: {\n        fontSize: 30,\n        color: myColors.light,\n        fontWeight: 'bold'\n    },\n    smallTextDark: {\n        fontSize: 30,\n        fontWeight: 'bold',\n        color: myColors.dark,\n    },\n    // Keyboard\n    row: {\n        maxWidth: '100%',\n        flexDirection: \"row\",\n    },\n    viewBottom: {\n        position: 'absolute',\n        bottom: 50,\n    },\n    screenFirstNumber: {\n        fontSize: 96,\n        color: myColors.white,\n        fontWeight: '200',\n        alignSelf: \"flex-end\",\n    },\n    screenSecondNumber: {\n        fontSize: 40,\n        color: myColors.white,\n        fontWeight: '200',\n        alignSelf: \"flex-end\",\n    },\n})","import { useState, useContext } from 'react';\nimport { StyleSheet, View, Switch, TouchableOpacity, Text } from 'react-native';\nimport { ThemeContext } from '../context/ThemeContext'; // Allows global declaration of theme\nimport { myColors } from '../styles/Colors';\nimport { Styles } from '../styles/GlobalStyles';\n\ninterface ButtonProps {\n    onPress: () => void;\n    title: string;\n    isBlue?: boolean;\n    isGray?: boolean;\n    btnWidth?: string;\n}\n\nexport default function Button({title, onPress, isBlue, isGray}: ButtonProps) {\n    const theme = useContext(ThemeContext);\n    return(\n        <TouchableOpacity\n            style={\n                title === \"0\" && theme === \"light\"?\n                Styles.btnZeroLight : title === \"0\" && theme === \"dark\"?\n                Styles.btnZeroDark : isBlue ?\n                Styles.btnBlue : isGray ?\n                Styles.btnGray : theme === \"light\" ?\n                Styles.btnLight : Styles.btnDark\n            }\n            onPress={onPress}\n        >\n            <Text\n                style={\n                    isBlue || isGray\n                    ? Styles.smallTextLight\n                    : theme === \"dark\"\n                    ? Styles.smallTextLight\n                    : Styles.smallTextDark\n                }\n            >\n                {title}\n            </Text>\n        </TouchableOpacity>\n    );\n}","import { View, Text } from 'react-native'\nimport * as React from 'react'\nimport Button from './Button'\nimport { Styles } from '../styles/GlobalStyles'\nimport { myColors } from '../styles/Colors'\nimport { Colors } from 'react-native/Libraries/NewAppScreen'\n\nconst myKeyboard = () => {\n\n  const [firstNumber, setFirstNumber] = React.useState('');\n  const [secondNumber, setSecondNumber] = React.useState('');\n  const [operation, setOperation] = React.useState('');\n  const [result, setResult] = React.useState<Number | null>(null); // State can be number or null, initially set as null\n\n  const handleNumberPress = (buttonValue : string) => {\n    if (firstNumber.length < 10){\n      setFirstNumber(firstNumber + buttonValue);\n    }\n  }\n\n  const handleOperationPress = (buttonValue : string) => {\n    setOperation(buttonValue);\n    setSecondNumber(firstNumber);\n    setFirstNumber('');\n  }\n\n  const clear = () => {\n    setFirstNumber('');\n    setSecondNumber('');\n    setOperation('');\n    setResult(null);\n  };\n\n  const getResult = () => {\n    switch(operation){\n      case '+':\n        clear();\n        setResult(parseFloat(firstNumber) + parseFloat(secondNumber));\n        break;\n      case '-':\n        clear();\n        setResult(parseFloat(firstNumber) - parseFloat(secondNumber));\n        break;\n      case '*':\n        clear();\n        setResult(parseFloat(firstNumber) * parseFloat(secondNumber));\n        break;\n      case '/':\n        clear();\n        setResult(parseFloat(firstNumber) / parseFloat(secondNumber));\n        break;\n      case '%':\n        clear();\n        if (parseFloat(secondNumber) != 0)\n          setResult((parseFloat(firstNumber) / 100) * parseFloat(secondNumber))\n      default:\n        clear();\n        setResult(0);\n        break;\n    }\n  };\n\n  const firstNumberDisplay = () => {\n    if(result !== null){\n      return <Text style={result<99999 ? [Styles.screenFirstNumber, {color: myColors.result}] : [Styles.screenFirstNumber, {fontSize: 50,color: myColors.result}]}>{result?.toString()}</Text>;\n    }\n\n    if( firstNumber && firstNumber.length < 6){\n      return <Text style={Styles.screenFirstNumber}>{firstNumber}</Text>;\n    }\n\n    if (firstNumber === \"\") {\n      return <Text style={Styles.screenFirstNumber}>{\"0\"}</Text>;\n    }\n    \n    if (firstNumber.length > 5 && firstNumber.length < 8) {\n      return (\n        <Text style={[Styles.screenFirstNumber, { fontSize: 70 }]}>\n          {firstNumber}\n        </Text>\n      );\n    }\n\n    if (firstNumber. length > 7) {\n      return (\n        <Text style={[Styles.screenFirstNumber, { fontSize: 50 }]}>\n        {firstNumber}\n        </Text>\n      );\n    }\n  };\n\n  // <></> : Fragments\n  // A common pattern in React is for a component to return multiple elements\n  // Fragments let you group a list of children without adding extra nodes to the DOM\n\n  return (\n    <View style={Styles.viewBottom}>\n      <View\n        style={{\n          height: 120,\n          width: '90%',\n          justifyContent: 'flex-end',\n          alignSelf: 'center',\n          marginBottom: 10\n        }}\n      >\n        <Text style={Styles.screenSecondNumber}>\n          {secondNumber}\n          <Text style={{\n            color: 'purple',\n            fontSize: 50,\n            fontWeight: '500',\n          }}>\n          </Text>\n        </Text>\n        {firstNumberDisplay()}\n      </View>\n      <View style={Styles.row}>\n        <Button title='C' isGray onPress={clear} btnWidth='83'/>\n        <Button title='+/-' isGray onPress={() => handleOperationPress(\"+/-\")} />\n        <Button title='%' isGray onPress={() => handleOperationPress(\"%\")} />\n        <Button title='÷' isBlue onPress={() => handleOperationPress(\"/\")} />\n      </View>\n      <View style={Styles.row}>\n        <Button title='7' onPress={() => handleNumberPress('7')} />\n        <Button title='8' onPress={() => handleNumberPress('8')} />\n        <Button title='9' onPress={() => handleNumberPress('9')} />\n        <Button title='×' isBlue onPress={() => handleOperationPress(\"*\")} />\n      </View>\n      <View style={Styles.row}>\n        <Button title='4' onPress={() => handleNumberPress('4')} />\n        <Button title='5' onPress={() => handleNumberPress('5')} />\n        <Button title='6' onPress={() => handleNumberPress('6')} />\n        <Button title='-' isBlue onPress={() => handleOperationPress(\"-\")} />\n      </View>\n      <View style={Styles.row}>\n        <Button title='1' onPress={() => handleNumberPress('1')} />\n        <Button title='2' onPress={() => handleNumberPress('2')} />\n        <Button title='3' onPress={() => handleNumberPress('3')} />\n        <Button title='+' isBlue onPress={() => handleOperationPress(\"+\")} />\n      </View>\n      <View style={Styles.row}>\n        <Button title='0' onPress={() => handleNumberPress('0')} />\n        <Button title='.' onPress={() => handleNumberPress('.')} />\n        <Button title='=' isBlue onPress={() => getResult()} />\n      </View>\n    </View>\n  )\n}\n\nexport default myKeyboard","import { useState } from 'react';\nimport { StyleSheet, View, Switch, SafeAreaView } from 'react-native';\nimport { ThemeContext } from './context/ThemeContext'; // Allows global declaration of theme\nimport { myColors } from './styles/Colors';\nimport MyKeyboard from './components/MyKeyboard';\n\nexport default function App() {\n  const [theme, setTheme] = useState('light');\n  return (\n    <ThemeContext.Provider value={theme}> \n      <SafeAreaView style={theme === 'light' ? styles.containerlight : styles.containerdark}>\n        <Switch\n          value={theme === 'dark'} // Switch on / true for whichever value is passed\n          onValueChange={() => setTheme(theme === 'light'? 'dark' : 'light')}\n          style={{marginTop:20,}}\n        />\n        <MyKeyboard/>\n      </SafeAreaView>\n    </ThemeContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  containerlight: {\n    flex: 1,\n    backgroundColor: myColors.white,\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n  containerdark: {\n    flex: 1,\n    backgroundColor: myColors.black,\n    alignItems: 'center',\n    justifyContent: 'flex-start'\n  },\n});"],"sourceRoot":""}